#!/usr/bin/env node

/**
 * Module dependencies.
 */

var express = require('../config/lib/express');
var debug = require('debug')('WorkEffort:server');
var http = require('http');
var logger = require('../config/lib/logger');
var mongoose = require('../config/lib/mongoose');
var config = require('../config/config');
var chalk = require('chalk');


function seedDB() {
    if (config.seedDB && config.seedDB.seed) {
        console.log(chalk.bold.red('Warning:  Database seeding is turned on'));
        seed.start();
    }
}

// Initialize Models
mongoose.loadModels(seedDB);

module.exports.loadModels = function loadModels() {
    mongoose.loadModels();
};


logger.info('start www');
mongoose.connect(function (db) {
    logger.info('mongoose callback');
    var app = express.init(db);
    init(app);
});


/**
 * Get port from environment and store in Express.
 */


function init(app) {
    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    logger.info('port'+port);
    logger.info('addr:' + server.address());

    server.listen(config.port, config.host, function () {
        // Create server URL
        var server = (process.env.NODE_ENV === 'secure' ? 'https://' : 'http://') + config.host + ':' + config.port;
        // Logging initialization
        console.log('--');
        console.log(chalk.green(config.app.title));
        console.log();
        console.log(chalk.green('Environment:     ' + process.env.NODE_ENV));
        console.log(chalk.green('Server:          ' + server));
        console.log(chalk.green('Database:        ' + config.db.uri));
        console.log(chalk.green('App version:     ' + config.meanjs.version));
        if (config.meanjs['meanjs-version'])
            console.log(chalk.green('MEAN.JS version: ' + config.meanjs['meanjs-version']));
        console.log('--');

    });
    server.on('error', onError);
    // server.on('listening',
    //     function () {
    //         var addr = server.address();
    //         var bind = typeof addr === 'string'
    //             ? 'pipe ' + addr
    //             : 'port ' + addr.port;
    //         debug('Listening on ' + bind);
    //     });

    /**
     * Normalize a port into a number, string, or false.
     */
}

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

